# üéØ Objetivo
Crie uma **landing page ultra moderna, responsiva e com apelo tecnol√≥gico**, voltada √† apresenta√ß√£o institucional da **Elohit Sync**, uma ag√™ncia especializada em gest√£o de intelig√™ncia artificial aplicada a processos empresariais e automa√ß√µes inteligentes. A est√©tica deve transmitir inova√ß√£o, sofistica√ß√£o e fluidez.

---

# ‚öôÔ∏è Requisitos T√©cnicos

## Frameworks & Ferramentas
- Front-end: **Next.js (React 18+) com TailwindCSS**
- Deploy: **Vercel-ready**, com estrutura otimizada para Core Web Vitals
- Anima√ß√µes: **Framer Motion** (transi√ß√µes suaves e responsivas)
- Acessibilidade: WCAG 2.1, uso de ARIA roles
- Componentiza√ß√£o moderna: uso de **shadcn/ui**, `lucide-react` e `@heroicons/react`
- Performance: lazy loading, SSR/ISR otimizado
- SEO: estrutura sem√¢ntica, metatags b√°sicas, OpenGraph configurado
- Vers√£o mobile: mobile-first com layout fluido
- Layout grid-based com design visual escal√°vel (ex: `grid-cols-12` com breakpoints definidos)
- Arquitetura limpa e modularizada (Atomic Design simplificado: `components/`, `sections/`, `hooks/`, `lib/`)
- Preparado para integra√ß√£o futura com `n8n` via webhooks ou client-side triggers

---

# üß± Estrutura de Sess√µes (modularizada como componentes)

## 1. Hero Section
- `components/sections/Hero.tsx`
  - T√≠tulo impactante com destaque de palavras via gradiente ou stroke animado
  - Subt√≠tulo com foco em resultado
  - Duplo CTA com variantes (prim√°rio + ghost)
  - Imagem/ilustra√ß√£o interativa em SVG animado (ex: fluxo de automa√ß√µes com AI nodes flutuantes)
  - Background animado em `canvas` ou `noise` com `framer-motion`

## 2. O que fazemos na pr√°tica
- `components/sections/WhatWeDo.tsx`
  - Blocos horizontais com √≠cones animados
  - Destaque de ferramentas (GPT, RPA, n8n, APIs)
  - Tom de voz objetivo e t√©cnico

## 3. Benef√≠cios da IA
- `components/sections/Benefits.tsx`
  - Cards interativos com hover e microintera√ß√µes
  - √çcones modernos com `lucide-react`
  - Textos concisos e orientados a ROI

## 4. Aplica√ß√µes por Segmento
- `components/sections/UseCases.tsx`
  - Carrossel responsivo ou tabs por setor
  - Cards com ilustra√ß√µes vetoriais
  - T√≠tulos de f√°cil escaneabilidade

## 5. Prova Social / Casos de Sucesso
- `components/sections/Testimonials.tsx`
  - Layout em carrossel ou grid com destaque ao resultado alcan√ßado
  - Componente com `motion.div` para entrada suave

## 6. Servi√ßos
- `components/sections/Services.tsx`
  - Grid com anima√ß√£o de entrada por item
  - Layout similar a ‚Äúfeature list‚Äù com √≠cones e t√≥picos

## 7. Nosso Processo
- `components/sections/Process.tsx`
  - Linha do tempo com √≠cones customizados e transi√ß√µes por `step`
  - Estilo progress tracker

## 8. Confian√ßa e Parcerias
- `components/sections/Trust.tsx`
  - Grid com logos (com placeholder)
  - Alternativa: Mosaico din√¢mico por setor atendido

## 9. CTA Final
- `components/sections/CallToAction.tsx`
  - Refor√ßo de CTA com formul√°rio de contato integrado
  - Captura de nome, e-mail, √°rea de atua√ß√£o
  - Valida√ß√£o b√°sica e UX fluida

## 10. Footer
- `components/sections/Footer.tsx`
  - Links organizados por categoria
  - Social icons com `lucide-react`
  - √Årea de pol√≠tica de privacidade e termos

---

# üß† Vibe-Coding ‚Äî Padr√µes Obrigat√≥rios

- Componentes com nome claro, uma responsabilidade e `Props` bem definidos
- C√≥digo DRY, coeso e reutiliz√°vel
- Separa√ß√£o de l√≥gica: use `hooks/`, `lib/`, `utils/`
- Layouts devem vir de `layouts/Default.tsx`
- Metadados configurados em `app/head.tsx`
- Utilizar `env` para vari√°veis de integra√ß√£o
- Usar `eslint`, `prettier` e `typescript strict`

---

# üîê Seguran√ßa & Boas Pr√°ticas
- Valida√ß√£o de input e escape de output
- Nada hardcoded: dados de exemplo via mock ou JSON externo
- Estrutura pronta para internacionaliza√ß√£o com `next-i18next` (optativo)
- Implementar sistema de tracking leve com consentimento (cookie banner via `next-themes` ou `cookie-consent` lib)

---

# üß™ Testabilidade e Extensibilidade
- Componentes devem ser test√°veis com `@testing-library/react`
- Formul√°rios prontos para integra√ß√£o com servi√ßos externos (n8n, Zapier)
- Estrutura de arquivos limpa e em conformidade com `feature-first design`

---

# üìÑ Extras
- Utilize como base visual o layout do PDF referenciado (landing page modelo)
- Garanta que o c√≥digo seja facilmente leg√≠vel por IA assistentes no Lovable.dev
- Caso precise dividir em arquivos, mantenha a coer√™ncia entre se√ß√µes com coment√°rios `// Section: ...`

---

